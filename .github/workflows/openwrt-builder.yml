name: Build openwrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  UPLOAD_BIN_DIR: 'false'
  UPLOAD_FIRMWARE: 'true'
  UPLOAD_RELEASE: 'false'
  UPLOAD_GOFILE: 'false'
  DEVICE_NAME: ''
  FILE_DATE: ''

jobs:
  build:  
    runs-on: ubuntu-24.04
    steps:
     - name: Checkout
       uses: actions/checkout@v4
      
     - name: Pre Initialization environment
       run: |
        docker rmi `docker images -q` || true
        sudo -E rm -rf /mnt/tmp-pv.img || true
        sudo -E df -h
        sudo -E ls -lh /mnt
     - name: Initialization environment
       env:
         DEBIAN_FRONTEND: noninteractive
       run: |
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install mergerfs build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
     - name: Clean up disk
       run: sudo rm -rf /opt/*
     - name: Clone source code
       run: |
        sudo -E rm -rf /mnt/work /mnt/work_dir /data_dir
        sudo -E mkdir -p /data_dir
        sudo -E mkdir -p /mnt/work_dir
        sudo -E mkdir -p /mnt/work
        sudo -E chmod 777 /mnt/work /mnt/work_dir /data_dir
        sudo -E mergerfs -o defaults,allow_other,use_ino,category.create=mfs /mnt/work_dir:/data_dir /mnt/work
        git clone --depth 1 --branch openwrt-22.03 https://github.com/openwrt/openwrt.git /mnt/work/openwrt
     - name: Update feeds
       run: cd /mnt/work/openwrt && ./scripts/feeds update -a
     - name: Install feeds
       run: cd /mnt/work/openwrt && ./scripts/feeds install -a
      
     - name: Building
       run: |
        # 如果有自定义配置文件，则复制到源码目录
        cp .config /mnt/work/openwrt/ || true
        cd /mnt/work/openwrt
        # 如果没有配置文件，则使用默认配置（defconfig）
        [ -f .config ] || make defconfig
        make download -j$(nproc)
        make -j$(nproc) V=s
        
     - name : Upload make.log if failure
       uses: actions/upload-artifact@v4
       if: failure()
       with:
         name: build openwrt
         path: /mnt/work/openwrt/make.log

     - name: Free Disk Space After Build
       run: |
        echo "Disk space before post-build cleanup:"
        df -h
        sudo rm -rf /usr/local/.ghcup
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo rm -rf /usr/local/lib/android/sdk/ndk
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo apt-get clean
        echo "Disk space after post-build cleanup:"
        df -h

     - name: Upload firmware directory
       uses: actions/upload-artifact@v4
       with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

     - name: Organize files
       id: organize
       run: |
          cd /mnt/work/openwrt/bin/targets/*/*
          rm -rf packages
          FIRMWARE_PATH=$(pwd)
          echo "FIRMWARE=${FIRMWARE_PATH}" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

     - name: Upload firmware directory
       uses: actions/upload-artifact@v4
       with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      # 以下步骤根据需求选择性启用
      # - name: Generate release tag
      #   id: tag
      #   run: |
      #     echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
      #     touch release.txt
      #     echo "status=success" >> $GITHUB_OUTPUT

      # - name: Upload firmware to release
      #   uses: softprops/action-gh-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ steps.tag.outputs.release_tag }}
      #     body_path: release.txt
      #     files: ${{ env.FIRMWARE }}/*

      # - name: Remove old Releases
      #   uses: dev-drprasad/delete-older-releases@v0
      #   with:
      #     keep_latest: 3
      #     delete_tags: true
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Delete workflow runs
      #   uses: Mattraks/delete-workflow-runs@v2
      #   with:
      #     retain_days: 0
      #     keep_minimum_runs: 2
